generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Integration {
  id        String   @id @default(cuid())
  name      String
  provider  String   @unique
  apiKey    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(false)
  baseUrl   String?
  model     String?
  region    String?
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  image        String?
  createdAt    DateTime @default(now())
  memberships  Membership[]
  auditLogs    AuditLog[]
  // If using NextAuth DB sessions/tokens:
  accounts     Account[]
  sessions     Session[]
}

model Organization {
  id           String       @id @default(cuid())
  name         String
  createdAt    DateTime     @default(now())
  memberships  Membership[]
  rulesets     Ruleset[]
  auditLogs    AuditLog[]
}

model Membership {
  id        String        @id @default(cuid())
  userId    String
  orgId     String
  role      Role
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
  org       Organization  @relation(fields: [orgId], references: [id])
  @@unique([userId, orgId])
}

enum Role {
  OWNER
  ADMIN
  ANALYST
  VIEWER
}

model Ruleset {
  id        String       @id @default(cuid())
  orgId     String
  name      String
  createdAt DateTime     @default(now())
  org       Organization @relation(fields: [orgId], references: [id])
  rules     Rule[]
}

model Rule {
  id           String    @id @default(cuid())
  rulesetId    String
  name         String
  pattern      String
  action       String     // 'redact' | 'flag' | 'block'
  replacement  String?
  createdAt    DateTime   @default(now())
  ruleset      Ruleset    @relation(fields: [rulesetId], references: [id])
}

model AuditLog {
  id        String       @id @default(cuid())
  orgId     String
  userId    String?
  action    String       // 'RULE_CREATED', 'PROXY_CALL', etc.
  meta      Json?
  createdAt DateTime     @default(now())
  org       Organization @relation(fields: [orgId], references: [id])
  user      User?        @relation(fields: [userId], references: [id])
}

// --- NextAuth (if you choose DB sessions/tokens) ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
